name: Cutter CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-16.04, macos-latest, windows-2016]
        python-version: [3.7.x]
        system-deps: [false]
        cc-override: [default]
        cxx-override: [default]
        include:
          - os: windows-2016
            package: true
          - os: ubuntu-16.04 # ensure that Cutter can be built at least in basic config on Ubuntu 16.04 using sytem libraries
            python-version: 3.5.10
            system-deps: true
            cc-override: '/usr/bin/gcc-5'
            cxx-override: '/usr/bin/g++-5'
          - os: ubuntu-16.04 # release package build
            system-deps: false
            package: true
      # Prevent one job from pausing the rest
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        persist-credentials: false
    - name: apt dependencies
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get install libgraphviz-dev mesa-common-dev libxkbcommon-x11-dev
        if [[ "${{ matrix.os }}" = "ubuntu-16.04" ]]
        then
          sudo apt-get install ninja-build/xenial-backports libxcb1-dev libxkbcommon-dev libxcb-*-dev
          if [[ "${{ matrix.system-deps }}" = "true" ]]
          then
            sudo apt-get install cmake
            sudo apt-get install --allow-downgrades \
                g++-5=5.4.\* \
                gcc-5=5.4.\* \
                gcc-5-base=5.4.\* \
                libstdc++-5-dev=5.4.\* \
                cpp-5=5.4.\* \
                libgcc-5-dev=5.4.\* \
                libasan2=5.4.\* \
                libmpx0=5.4.\*
           fi
           # make sure cmake that was just installed is at the front of path before
           # additional software installed by GitHub
           echo /usr/bin >> $GITHUB_PATH
        else
          sudo apt-get install ninja-build
        fi
        if [[ "${{ matrix.system-deps }}" = "true" ]]
        then
          sudo apt-get install qt5-default libqt5svg5-dev qttools5-dev qttools5-dev-tools
        fi
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: homebrew dependencies
      if: contains(matrix.os, 'macos')
      run: |
        cd scripts
        rm '/usr/local/bin/2to3' # symlink to some kind of existing python2.7 installation conflicts with brew python3 which gets installed as indirect dependency
        brew update --preinstall # temporary workaround for https://github.com/Homebrew/homebrew-bundle/issues/751
        brew bundle
        brew install coreutils
        brew install pkg-config
    - name: py dependencies
      run: |
        # 0.56.1 doesn't work with python 3.5 on Ubuntu 16.04
        pip install meson==0.56.0
    - name: cmake ubuntu
      if: contains(matrix.os, 'ubuntu')
      run: |
        if [[ "${{ matrix.system-deps }}" = "false" ]]
        then
          scripts/fetch_deps.sh
          source cutter-deps/env.sh
          export PKG_CONFIG_PATH="$CUTTER_DEPS_PYTHON_PREFIX/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          export LD_LIBRARY_PATH="`llvm-config --libdir`:$LD_LIBRARY_PATH"
        fi
        set -euo pipefail #TODO: move to top once cutter-deps doesn't fail
        if [[ "${{ matrix.cc-override }}" != "default" ]]
        then
          export CC="${{matrix.cc-override}}"
          export CXX="${{matrix.cxx-override}}"
        fi

        source scripts/prepare_breakpad_linux.sh
        export PKG_CONFIG_PATH="$CUSTOM_BREAKPAD_PREFIX/lib/pkgconfig:${PKG_CONFIG_PATH:-}" #
        mkdir build
        cd build
        cmake --version
        if [[ "${{ matrix.system-deps }}" = "false" ]]
        then
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCUTTER_ENABLE_PYTHON=ON \
            -DPYTHON_LIBRARY="$CUTTER_DEPS_PYTHON_PREFIX/lib/libpython3.9.so" \
            -DPYTHON_INCLUDE_DIR="$CUTTER_DEPS_PYTHON_PREFIX/include/python3.9" \
            -DPYTHON_EXECUTABLE="$CUTTER_DEPS_PYTHON_PREFIX/bin/python3" \
            -DCUTTER_ENABLE_PYTHON_BINDINGS=ON \
            -DCUTTER_ENABLE_GRAPHVIZ=OFF \
            -DCUTTER_ENABLE_CRASH_REPORTS=ON \
            -DCUTTER_ENABLE_TESTS=ON \
            -DCUTTER_USE_BUNDLED_RIZIN=ON \
            -DCUTTER_APPIMAGE_BUILD=ON \
            -DCUTTER_ENABLE_PACKAGING=ON \
            -DCUTTER_ENABLE_DEPENDENCY_DOWNLOADS=ON \
            -DCUTTER_PACKAGE_RZ_GHIDRA=ON \
            -DCMAKE_INSTALL_PREFIX=appdir/usr \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \
            ..
        else
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCUTTER_USE_BUNDLED_RIZIN=ON \
            -DCUTTER_ENABLE_TESTS=ON \
            ..
        fi
        ninja
        export QT_QPA_PLATFORM=minimal
        ./test/CutterTest
        if [[ "${{ matrix.package || false }}" = "true" ]]
        then
          export CUTTER_VERSION=$(python ../scripts/get_version.py)
          export VERSION=$CUTTER_VERSION
          ninja install
          "../scripts/appimage_embed_python.sh" appdir
          # "../scripts/rz-ghidra.sh" -DCMAKE_INSTALL_PREFIX="`pwd`/appdir/usr" -DBUILD_CUTTER_PLUGIN=ON -DCUTTER_SOURCE_DIR="`pwd`/.."
          APP_PREFIX=`pwd`/appdir/usr
          # export LD_LIBRARY_PATH=${APP_PREFIX}/lib:$Shiboken2_ROOT/lib
          export PATH=$PATH:${APP_PREFIX}/bin
          "../scripts/jsdec.sh" --prefix=`pwd`/appdir/usr
          wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/6/linuxdeployqt-6-x86_64.AppImage"
          chmod a+x linuxdeployqt*.AppImage
          rm -fv "../cutter-deps/qt/plugins/imageformats/libqjp2.so"
          # ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -executable=./appdir/usr/bin/python3 -bundle-non-qt-libs -no-strip -exclude-libs=libnss3.so,libnssutil3.so,libqjp2.so -ignore-glob=usr/lib/python3.9/**/* -verbose=2
          # exclude librzghidra cutter plugin because cutter and rz plugin is loaded manuallly as they are plugins linuxdeployqt doesn't know this
          ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop \
            -executable=./appdir/usr/bin/python3 \
            -appimage \
            -no-strip -exclude-libs=libnss3.so,libnssutil3.so,libqjp2.so \
            -ignore-glob=usr/lib/python3.9/**/* \
            -ignore-glob=usr/share/RizinOrg/Cutter/plugins/native/librz_ghidra_cutter.so \
            -verbose=2
          find ./appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq
          export APPIMAGE_FILE="Cutter-v$CUTTER_VERSION-x64.Linux.AppImage"
          mv Cutter-*-x86_64.AppImage "$APPIMAGE_FILE"
          echo PACKAGE_NAME=$APPIMAGE_FILE >> $GITHUB_ENV
        fi
    - name: cmake macos
      shell: bash
      if: contains(matrix.os, 'macos')
      run: |
        scripts/fetch_deps.sh
        source cutter-deps/env.sh
        set -euo pipefail
        export PATH=/usr/local/opt/llvm/bin:$PATH
        source scripts/prepare_breakpad_macos.sh
        mkdir build
        cd build
        cmake \
                -DCMAKE_BUILD_TYPE=Release \
                -DPYTHON_LIBRARY="$CUTTER_DEPS_PYTHON_PREFIX/lib/libpython3.9.dylib" \
                -DPYTHON_INCLUDE_DIR="$CUTTER_DEPS_PYTHON_PREFIX/include/python3.9" \
                -DPYTHON_EXECUTABLE="$CUTTER_DEPS_PYTHON_PREFIX/bin/python3" \
                -DCUTTER_ENABLE_PYTHON=ON \
                -DCUTTER_ENABLE_PYTHON_BINDINGS=ON \
                -DCUTTER_ENABLE_CRASH_REPORTS=ON \
                -DCUTTER_USE_BUNDLED_RIZIN=ON \
                -DCUTTER_ENABLE_PACKAGING=ON \
                -DCUTTER_ENABLE_TESTS=ON \
                -DCUTTER_PACKAGE_DEPENDENCIES=ON \
                -DCUTTER_ENABLE_DEPENDENCY_DOWNLOADS=ON \
                -DCUTTER_PACKAGE_RZ_GHIDRA=ON \
                -DCMAKE_FRAMEWORK_PATH="$BREAKPAD_FRAMEWORK_DIR" \
                -DCPACK_BUNDLE_APPLE_CERT_APP="-" \
                .. && \
              make -j4;
        make package
        export CUTTER_VERSION=$(python3 ../scripts/get_version.py)
        echo PACKAGE_NAME=Cutter-${CUTTER_VERSION}-Darwin.dmg >> $GITHUB_ENV
        ./test/CutterTest;
    - name: windows dependencies
      if: contains(matrix.os, 'windows')
      shell: bash
      run: |
        pip install ninja
        scripts/fetch_deps.sh
        choco install winflexbison3
    - name: windows cmake
      if: contains(matrix.os, 'windows')
      shell: cmd
      run: |
        set ARCH=x64
        set CUTTER_DEPS=%CD%\cutter-deps
        set PATH=%CD%\cutter-deps\qt\bin;%PATH%
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        call scripts\prepare_breakpad.bat
        cd
        mkdir build
        cd build
        set PACKAGE_NAME=cutter-git-x64.Windows
        cmake ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DCUTTER_USE_BUNDLED_RIZIN=ON ^
          -DCUTTER_ENABLE_TESTS=ON ^
          -DCUTTER_ENABLE_PYTHON=ON ^
          -DCUTTER_ENABLE_PYTHON_BINDINGS=ON ^
          -DCUTTER_ENABLE_PACKAGING=ON ^
          -DCUTTER_PACKAGE_DEPENDENCIES=ON ^
          -DCUTTER_PACKAGE_RZ_GHIDRA=ON ^
          -DCUTTER_PACKAGE_JSDEC=ON ^
          -DCUTTER_ENABLE_DEPENDENCY_DOWNLOADS=ON ^
          -DCUTTER_ENABLE_CRASH_REPORTS=ON ^
          -DCMAKE_PREFIX_PATH="%CUTTER_DEPS%\pyside" ^
          -DCPACK_PACKAGE_FILE_NAME=%PACKAGE_NAME% ^
          -G Ninja ^
          ..
        cmake --build . --config Release
        cmake --build . --config Release --target package
        cd test; CutterTest
        echo PACKAGE_NAME=%PACKAGE_NAME%.zip >> %GITHUB_ENV%
    - uses: actions/upload-artifact@v2
      if: env.PACKAGE_NAME != null
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: build/${{ env.PACKAGE_NAME }}
